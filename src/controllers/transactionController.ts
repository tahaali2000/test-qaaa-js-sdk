/**
 * Pagination TesterLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  TransactionsCursored,
  transactionsCursoredSchema,
} from '../models/transactionsCursored';
import {
  TransactionsLinked,
  transactionsLinkedSchema,
} from '../models/transactionsLinked';
import {
  TransactionsOffset,
  transactionsOffsetSchema,
} from '../models/transactionsOffset';
import { number, optional, string } from '../schema';
import { BaseController } from './baseController';

export class TransactionController extends BaseController {
  /**
   * Fetch transactions using Offset-based Pagination
   *
   * @param offset The number of records to skip before selecting transactions.
   * @param limit  Number of transactions per page.
   * @return Response from the API call


   */
  async fetchWithOffset(
    offset?: number,
    limit?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<TransactionsOffset>> {
    const req = this.createRequest('GET', '/transactions/offset');
    const mapped = req.prepareArgs({
      offset: [offset, optional(number())],
      limit: [limit, optional(number())],
    });
    req.query('offset', mapped.offset);
    req.query('limit', mapped.limit);
    return req.callAsJson(transactionsOffsetSchema, requestOptions);
  }

  /**
   * Fetch transactions using Cursor-based Pagination
   *
   * @param cursor The unique identifier (cursor) to fetch the next set of results.
   * @param limit  Number of transactions per page.
   * @return Response from the API call


   */
  async fetchWithCursor(
    cursor?: string,
    limit?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<TransactionsCursored>> {
    const req = this.createRequest('GET', '/transactions/cursor');
    const mapped = req.prepareArgs({
      cursor: [cursor, optional(string())],
      limit: [limit, optional(number())],
    });
    req.query('cursor', mapped.cursor);
    req.query('limit', mapped.limit);
    return req.callAsJson(transactionsCursoredSchema, requestOptions);
  }

  /**
   * Fetch transactions using Link-based Pagination
   *
   * @param page The page number to fetch.
   * @param size Number of transactions per page.
   * @return Response from the API call


   */
  async fetchWithLink(
    page?: number,
    size?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<TransactionsLinked>> {
    const req = this.createRequest('GET', '/transactions/links');
    const mapped = req.prepareArgs({
      page: [page, optional(number())],
      size: [size, optional(number())],
    });
    req.query('page', mapped.page);
    req.query('size', mapped.size);
    return req.callAsJson(transactionsLinkedSchema, requestOptions);
  }
}
